///////////////////////////////////////////////////////////////////
//
// Autogenerated file. Do not edit.
//
///////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;

using GoldParser;

namespace Pash.ParserIntrinsics
{
    class RuleConstants
    {
        public static readonly List<RuleConstants> All = new List<RuleConstants>();
        
        readonly public string Description;
        readonly public int Index;
        readonly public int NonTerminalIndex;
        
        RuleConstants(string description, int index, int nonTerminalIndex)
        {
            this.Description = description;
            this.Index = index;
            this.NonTerminalIndex = nonTerminalIndex;
            
            All.Add(this);
        }
        
        public override string ToString()
        {
            return this.Description;
        }
        
        public static readonly RuleConstants Rule_Statementseparatortoken_Newline                 = new RuleConstants ("<statementSeparatorToken> ::= NewLine <statementSeparatorToken>", 0, 45);
        public static readonly RuleConstants Rule_Statementseparatortoken                         = new RuleConstants ("<statementSeparatorToken> ::= ", 1, 45);
        public static readonly RuleConstants Rule_Statementlistrule                               = new RuleConstants ("<statementListRule> ::= <statementRule>", 2, 43);
        public static readonly RuleConstants Rule_Statementlistrule2                              = new RuleConstants ("<statementListRule> ::= <statementRule> <statementSeparatorToken> <statementListRule>", 3, 43);
        public static readonly RuleConstants Rule_Statementrule                                   = new RuleConstants ("<statementRule> ::= <pipelineRule>", 4, 44);
        public static readonly RuleConstants Rule_Statementrule_Commenttoken                      = new RuleConstants ("<statementRule> ::= CommentToken", 5, 44);
        public static readonly RuleConstants Rule_Pipelinerule                                    = new RuleConstants ("<pipelineRule> ::= <cmdletCall>", 6, 38);
        public static readonly RuleConstants Rule_Pipelinerule_Pipe                               = new RuleConstants ("<pipelineRule> ::= <cmdletCall> '|' <pipelineRule>", 7, 38);
        public static readonly RuleConstants Rule_Pipelinerule2                                   = new RuleConstants ("<pipelineRule> ::= <assignmentStatementRule>", 8, 38);
        public static readonly RuleConstants Rule_Pipelinerule_Pipe2                              = new RuleConstants ("<pipelineRule> ::= <assignmentStatementRule> '|' <pipelineRule>", 9, 38);
        public static readonly RuleConstants Rule_Assignmentstatementrule_Assignmentoperatortoken = new RuleConstants ("<assignmentStatementRule> ::= <lvalueExpression> AssignmentOperatorToken <pipelineRule>", 10, 25);
        public static readonly RuleConstants Rule_Lvalueexpression                                = new RuleConstants ("<lvalueExpression> ::= <lvalue>", 11, 35);
        public static readonly RuleConstants Rule_Lvalue                                          = new RuleConstants ("<lvalue> ::= <simpleLvalue>", 12, 34);
        public static readonly RuleConstants Rule_Simplelvalue_Variabletoken                      = new RuleConstants ("<simpleLvalue> ::= VariableToken", 13, 42);
        public static readonly RuleConstants Rule_Parameterargumenttoken                          = new RuleConstants ("<ParameterArgumentToken> ::= <valueRule>", 14, 37);
        public static readonly RuleConstants Rule_Parameterargumenttoken_Anywordtoken             = new RuleConstants ("<ParameterArgumentToken> ::= AnyWordToken", 15, 37);
        public static readonly RuleConstants Rule_Parameterargumenttoken_Parametertoken           = new RuleConstants ("<ParameterArgumentToken> ::= ParameterToken", 16, 37);
        public static readonly RuleConstants Rule_Cmletparamslist                                 = new RuleConstants ("<cmletParamsList> ::= <ParameterArgumentToken> <cmletParamsList>", 17, 29);
        public static readonly RuleConstants Rule_Cmletparamslist2                                = new RuleConstants ("<cmletParamsList> ::= <ParameterArgumentToken>", 18, 29);
        public static readonly RuleConstants Rule_Cmdletname_Anywordtoken                         = new RuleConstants ("<cmdletName> ::= AnyWordToken", 19, 28);
        public static readonly RuleConstants Rule_Cmdletcall_Execcall                             = new RuleConstants ("<cmdletCall> ::= ExecCall <cmdletName> <cmletParamsList>", 20, 27);
        public static readonly RuleConstants Rule_Cmdletcall_Execcall2                            = new RuleConstants ("<cmdletCall> ::= ExecCall <cmdletName>", 21, 27);
        public static readonly RuleConstants Rule_Cmdletcall                                      = new RuleConstants ("<cmdletCall> ::= <cmdletName> <cmletParamsList>", 22, 27);
        public static readonly RuleConstants Rule_Cmdletcall2                                     = new RuleConstants ("<cmdletCall> ::= <cmdletName>", 23, 27);
        public static readonly RuleConstants Rule_Cmdletcall3                                     = new RuleConstants ("<cmdletCall> ::= <expressionRule>", 24, 27);
        public static readonly RuleConstants Rule_Expressionrule                                  = new RuleConstants ("<expressionRule> ::= <logicalExpressionRule>", 25, 31);
        public static readonly RuleConstants Rule_Logicalexpressionrule                           = new RuleConstants ("<logicalExpressionRule> ::= <bitwiseExpressionRule>", 26, 33);
        public static readonly RuleConstants Rule_Bitwiseexpressionrule                           = new RuleConstants ("<bitwiseExpressionRule> ::= <comparisonExpressionRule>", 27, 26);
        public static readonly RuleConstants Rule_Comparisonexpressionrule                        = new RuleConstants ("<comparisonExpressionRule> ::= <addExpressionRule>", 28, 30);
        public static readonly RuleConstants Rule_Addexpressionrule                               = new RuleConstants ("<addExpressionRule> ::= <multiplyExpressionRule>", 29, 23);
        public static readonly RuleConstants Rule_Addexpressionrule_Additionoperatortoken         = new RuleConstants ("<addExpressionRule> ::= <multiplyExpressionRule> AdditionOperatorToken <addExpressionRule>", 30, 23);
        public static readonly RuleConstants Rule_Multiplyexpressionrule                          = new RuleConstants ("<multiplyExpressionRule> ::= <formatExpressionRule>", 31, 36);
        public static readonly RuleConstants Rule_Formatexpressionrule                            = new RuleConstants ("<formatExpressionRule> ::= <rangeExpressionRule>", 32, 32);
        public static readonly RuleConstants Rule_Rangeexpressionrule                             = new RuleConstants ("<rangeExpressionRule> ::= <arrayLiteralRule>", 33, 41);
        public static readonly RuleConstants Rule_Rangeexpressionrule_Rangeoperatortoken          = new RuleConstants ("<rangeExpressionRule> ::= <arrayLiteralRule> RangeOperatorToken <rangeExpressionRule>", 34, 41);
        public static readonly RuleConstants Rule_Arrayliteralrule                                = new RuleConstants ("<arrayLiteralRule> ::= <postfixOperatorRule>", 35, 24);
        public static readonly RuleConstants Rule_Arrayliteralrule_Commatoken                     = new RuleConstants ("<arrayLiteralRule> ::= <postfixOperatorRule> CommaToken <arrayLiteralRule>", 36, 24);
        public static readonly RuleConstants Rule_Postfixoperatorrule                             = new RuleConstants ("<postfixOperatorRule> ::= <propertyOrArrayReferenceRule>", 37, 39);
        public static readonly RuleConstants Rule_Propertyorarrayreferencerule                    = new RuleConstants ("<propertyOrArrayReferenceRule> ::= <valueRule>", 38, 40);
        public static readonly RuleConstants Rule_Valuerule_Stringtoken                           = new RuleConstants ("<valueRule> ::= StringToken", 39, 46);
        public static readonly RuleConstants Rule_Valuerule_Variabletoken                         = new RuleConstants ("<valueRule> ::= VariableToken", 40, 46);
        public static readonly RuleConstants Rule_Valuerule_Numbertoken                           = new RuleConstants ("<valueRule> ::= NumberToken", 41, 46);
        public static readonly RuleConstants Rule_Valuerule_Dollarlparan_Rparan                   = new RuleConstants ("<valueRule> ::= '$(' <statementRule> ')'", 42, 46);
        public static readonly RuleConstants Rule_Valuerule_Lparan_Rparan                         = new RuleConstants ("<valueRule> ::= '(' <assignmentStatementRule> ')'", 43, 46);
    };
}
